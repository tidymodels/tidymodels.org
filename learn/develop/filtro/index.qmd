---
title: "Create your own score class object"
categories:
  - developer tools
type: learn-subsection
weight: 1
description: | 
 Create a new score class object for feature selection.
toc: true
toc-depth: 3
include-after-body: ../../../resources.html
---

```{r}
#| label: "setup"
#| include: false
#| message: false
#| warning: false
source(here::here("common.R"))
```

```{r}
#| label: "load"
#| include: false
#| message: false
#| warning: false
library(filtro)
library(modeldata)

pkgs <- c("filtro", "modeldata")
```

## Introduction

`r article_req_pkgs(pkgs)`

You can construct new scoring objects using `class_score()`. This article is a guide to creating new scoring objects. 

## Scoring object

All subclasses specific to the scoring method have a parent class named `class_score`. There are a few properties (attributes) for this object:

```{r}
#| label: "class_score"
library(filtro)
args(class_score)
```

-   `outcome_type`: What types of outcome can the method handle? The options are `numeric`, `factor`, or both. 

-   `predictor_type`: What types of predictor can the method handle? The options are `numeric`, `factor`, or both. 

-   `case_weights`: Does the method accpet case weights? It is `TRUE` or `FALSE`.

-   `range`: Are there known ranges for the statistic? For example, `c(0, Inf)`, `c(0, 1)`. 

-   `inclusive`: Are these ranges inclusive at the bounds? For example, `c(FALSE, FALSE)`, `c(TRUE, TRUE)`. 

-   `fallback_value`: What is a value that can be used for the statistic so that it will never be eliminated? For example, `0`, `Inf`.

-   `score_type`: What is the column name that will be used for the statistic values? For example, `aov_pval`, `aov_fstat`. 

-   (Not used) `sorts`: How should the values be sorted (from most- to least-important)?

-   `direction`: What direction of values indicates the most important values? For example,  `maximum`, `minimize`.

-   `deterministic`: Does the fitting process use random numbers? It is `TRUE` or `FALSE`.

-   `tuning`: Does the method have tuning parameters? It is `TRUE` or `FALSE`.

-   `calculating_fn`: What function, if any, is used to estimate the values from data?

-   `label`: What label to use when printing? For example, `ANOVA p-values`, `ANOVA F-statistics`.

-   `packages`: What packages, if any, are required to train the method?

-   `results`: A slot for the results once the method is fitted. Initially, this is an empty data frame.

## Scoring object specific to the scoring method

As an example, let’s consider the ANOVA F-test filter. 

`class_score_aov` is a subclass of `class_score`. Any additional properties specific to the implementation can be added in the subclass. For example: 

```{r}
# Create a subclass named 'class_score_aov'
class_score_aov <- S7::new_class(
  "class_score_aov",
  parent = class_score,
  properties = list(
    neg_log10 = S7::new_property(S7::class_logical, default = TRUE)
  )
)
```

In addition to the properties inherited from the parent class, `class_score_aov` also includes:

- `neg_log10`: Represent the score as `-log10(p_value)`? It is `TRUE` or `FALSE`.

For the ANOVA F-test filter, users can represent the score using either

- p-value or 

- F-statistic. 

We demonstrate how to create these instances (objects) accordingly. 

We create `score_aov_pval` as an instance of the `class_score_aov` subclass by calling its constructor and specifying its properties:

```{r}
# ANOVA p-value
score_aov_pval <-
  class_score_aov(
    outcome_type = c("numeric", "factor"),
    predictor_type = c("numeric", "factor"),
    case_weights = TRUE,
    range = c(0, Inf),
    inclusive = c(FALSE, FALSE),
    fallback_value = Inf,
    score_type = "aov_pval",
    direction = "maximize",
    deterministic = TRUE,
    tuning = FALSE,
    label = "ANOVA p-values"
  )
```

Individual properties can be accessed via `object@`. For example: 

```{r}
score_aov_pval@case_weights
score_aov_pval@fallback_value
score_aov_pval@direction
```

`score_aov_fstat` is another instance of the `class_score_aov` subclass:  

```{r}
# ANOVA F-statistic
score_aov_fstat <-
  class_score_aov(
    outcome_type = c("numeric", "factor"),
    predictor_type = c("numeric", "factor"),
    case_weights = TRUE,
    range = c(0, Inf),
    inclusive = c(FALSE, FALSE),
    fallback_value = Inf,
    score_type = "aov_fstat",
    direction = "maximize",
    deterministic = TRUE,
    tuning = FALSE,
    label = "ANOVA F-statistics"
  )
```

## Fitting (or estimating) score

So far, we have discussed how to create a subclass and construct instances (objects) for the ANOVA F-test filter. 

`fit()` serves both as a generic and as methods used to fit (or estimate) score.

The generic named `fit()` is re-exported and dispatches to the appropriate method based on the class of the object passed. We define multiple methods named `fit()`. Each of these methods performs the actual fitting or score estimation for a specific class of object. 

The ANOVA F-test filter, for example: 

```{r}
# Check the class of the object
class(score_aov_pval)
class(score_aov_fstat)
```

Both objects belong to the class `class_score_aov`. Therefore, when `fit()` is called, the method for `class_score_aov` is dispatched, performing the actual fitting using the ANOVA F-test filter:

```{r}
#| eval: false
# Method dispatch for objects of class `class_score_aov`
score_aov_pval |>
  fit(Sale_Price ~ ., data = ames)
score_aov_fstat |>
  fit(Sale_Price ~ ., data = ames)
```

The correlation filter, for another example: 

```{r}
# Check the class of the object
class(score_cor_pearson)
class(score_cor_spearman)
```

Both objects belong to the class `class_score_cor`. Therefore, when `fit()` is called, the method for `class_score_cor` is dispatched, performing the actual fitting using the correlation filter:

```{r}
#| eval: false
# Method dispatch for objects of class `class_score_cor`
score_cor_pearson |>
  fit(Sale_Price ~ ., data = ames)
score_cor_spearman |>
  fit(Sale_Price ~ ., data = ames)
```

## Documenting S7 methods 

Documentation for S7 methods is still a work in progress, and it seems no one currently knows the correct approach. Here’s how we tackle it: 

We re-export the `fit()` generic from another package. Instead of documenting each individual `fit()` method, we provide the details in the "Details" section and the "Estimating the scores" subsection of the documentation for the corresponding object. 

The code below opens the help page for the `fit()` generic: 

```{r}
#| eval: false
# Help page for `fit()` generic
?fit
```

The code below opens the help pages for specific `fit()` method: 

```{r}
#| eval: false
# Help page for `fit()` method along with the documentation for the specific object
?score_aov_pval
?score_aov_fstat
```

```{r}
#| eval: false
# Help page for `fit()` method along with the documentation for the specific object
?score_cor_pearson
?score_cor_spearman
```

## Accessing results after fitting

Once the method has been fitted via `fit()`, the data frame of results can be accessed via `object@results`. 

We use a subset of the Ames data set from the {modeldata} package for demonstration. The data set is used to predict housing sale price, and `Sale_Price` is the outcome and is numeric. 

```{r}
library(modeldata)
ames_subset <- modeldata::ames |>
  # Use a subset of data for demonstration
  dplyr::select(
    Sale_Price,
    MS_SubClass,
    MS_Zoning,
    Lot_Frontage,
    Lot_Area,
    Street
  )
ames_subset <- ames_subset |>
  dplyr::mutate(Sale_Price = log10(Sale_Price))
```

Next, we fit the score as we discuss before: 

```{r}
# # Specify ANOVA p-value and fit score
# ames_aov_pval_res <-
#   score_aov_pval |>
#   fit(Sale_Price ~ ., data = ames_subset)
```

```{r}
# # Specify ANOVA F-statistic and fit score
# ames_aov_fstat_res <-
#   score_aov_fstat |>
#   fit(Sale_Price ~ ., data = ames_subset)
```

Recall that individual properties of an object can be accessed using `object@`. Once the method has been fitted, the resulting data frame can be accessed via `object@results`:

```{r}
# ames_aov_pval_res@results
```

```{r}
# ames_aov_fstat_res@results
```

## Session information {#session-info}

```{r}
#| label: "si"
#| echo: false
small_session(pkgs)
```
