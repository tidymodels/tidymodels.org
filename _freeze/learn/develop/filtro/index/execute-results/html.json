{
  "hash": "c30015f96bc239b4644a9f9974066870",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Create your own score class object\"\ncategories:\n  - developer tools\ntype: learn-subsection\nweight: 1\ndescription: | \n Create a new score class object for feature selection.\ntoc: true\ntoc-depth: 3\ninclude-after-body: ../../../resources.html\n---\n\n\n\n\n\n## Introduction\n\nTo use code in this article,  you will need to install the following packages: filtro and modeldata.\n\nYou can construct new scoring objects using `class_score()`. This article is a guide to creating new scoring objects. \n\n## Scoring object\n\nAll subclasses specific to the scoring method have a parent class named `class_score`. There are a few properties (attributes) for this object:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(filtro)\nargs(class_score)\n#> function (outcome_type = c(\"numeric\", \"factor\"), predictor_type = c(\"numeric\", \n#> \"factor\"), case_weights = logical(0), range = integer(0), inclusive = logical(0), \n#>     fallback_value = integer(0), score_type = character(0), sorts = function() NULL, \n#>     direction = character(0), deterministic = logical(0), tuning = logical(0), \n#>     calculating_fn = function() NULL, label = character(0), packages = character(0), \n#>     results = data.frame()) \n#> NULL\n```\n:::\n\n\n-   `outcome_type`: What types of outcome can the method handle? The options are `numeric`, `factor`, or both. \n\n-   `predictor_type`: What types of predictor can the method handle? The options are `numeric`, `factor`, or both. \n\n-   `case_weights`: Does the method accpet case weights? It is `TRUE` or `FALSE`.\n\n-   `range`: Are there known ranges for the statistic? For examples, `c(0, Inf)`, `c(0, 1)`. \n\n-   `inclusive`: Are these ranges inclusive at the bounds? For example, `c(FALSE, FALSE)`, `c(TRUE, TRUE)`. \n\n-   `fallback_value`: What is a value that can be used for the statistic so that it will never be eliminated? For examples, `0`, `Inf`.\n\n-   `score_type`: What is the column name that will be used for the statistic values? For examples, `aov_pval`, `aov_fstat`. \n\n-   (Not used) `sorts`: How should the values be sorted (from most- to least-important)?\n\n-   `direction`: What direction of values indicates the most important values? For examples,  `maximum`, `minimize`.\n\n-   `deterministic`: Does the fitting process use random numbers? It is `TRUE` or `FALSE`.\n\n-   `tuning`: Does the method have tuning parameters? It is `TRUE` or `FALSE`.\n\n-   `calculating_fn`: What function, if any, is used to estimate the values from data?\n\n-   `label`: What label to use when printing? For examples, `ANOVA p-values`, `ANOVA F-statistics`.\n\n-   `packages`: What packages, if any, are required to train the method?\n\n-   `results`: A slot for the results once the method is fitted. Initially, this is an empty data frame.\n\n## Scoring object specific to the scoring method\n\nAs an example, let’s consider the ANOVA F-test filter. \n\n`class_score_aov` is a subclass of `class_score`. Any additional properties specific to the implementation can be added in the subclass. For example: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Create a subclass named 'class_score_aov'\nclass_score_aov <- S7::new_class(\n  \"class_score_aov\",\n  parent = class_score,\n  properties = list(\n    neg_log10 = S7::new_property(S7::class_logical, default = TRUE)\n  )\n)\n```\n:::\n\n\nIn addition to the properties inherited from the parent class, `class_score_aov` also includes:\n\n- `neg_log10`: Represent the score as `-log10(p_value)`? It is `TRUE` or `FALSE`.\n\nFor the ANOVA F-test filter, users can represent the score using either\n\n- p-value or \n\n- F-statistic. \n\nWe demonstrate how to create these instances (objects) accordingly. \n\nWe create `score_aov_pval` as an instance of the `class_score_aov` subclass by calling its constructor and specifying its properties:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# ANOVA p-value\nscore_aov_pval <-\n  class_score_aov(\n    outcome_type = c(\"numeric\", \"factor\"),\n    predictor_type = c(\"numeric\", \"factor\"),\n    case_weights = TRUE,\n    range = c(0, Inf),\n    inclusive = c(FALSE, FALSE),\n    fallback_value = Inf,\n    score_type = \"aov_pval\",\n    direction = \"maximize\",\n    deterministic = TRUE,\n    tuning = FALSE,\n    label = \"ANOVA p-values\"\n  )\n```\n:::\n\n\nIndividual properties can be accessed via `object@`. For examples: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscore_aov_pval@case_weights\n#> [1] TRUE\nscore_aov_pval@fallback_value\n#> [1] Inf\nscore_aov_pval@direction\n#> [1] \"maximize\"\n```\n:::\n\n\n`score_aov_fstat` is another instance of the `class_score_aov` subclass:  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# ANOVA F-statistic\nscore_aov_fstat <-\n  class_score_aov(\n    outcome_type = c(\"numeric\", \"factor\"),\n    predictor_type = c(\"numeric\", \"factor\"),\n    case_weights = TRUE,\n    range = c(0, Inf),\n    inclusive = c(FALSE, FALSE),\n    fallback_value = Inf,\n    score_type = \"aov_fstat\",\n    direction = \"maximize\",\n    deterministic = TRUE,\n    tuning = FALSE,\n    label = \"ANOVA F-statistics\"\n  )\n```\n:::\n\n\n## Fitting (or estimating) score\n\nSo far, we have discussed how to create a subclass and construct instances (objects) for the ANOVA F-test filter. \n\n`fit()` is a generic but also a method used to fit (or estimate) score.\n\nWhen `fit()` is a generic, it dispatches to the appropriate method based on the class of the object that is passed. When `fit()` is a method, it performs he actual fitting or score estimation for that specific class of object. \n\nThe ANOVA F-test filters, for example: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Check the class of the object\nclass(score_aov_pval)\n#> [1] \"class_score_aov\"     \"filtro::class_score\" \"S7_object\"\nclass(score_aov_fstat)\n#> [1] \"class_score_aov\"     \"filtro::class_score\" \"S7_object\"\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Method dispatch for objects of class `class_score_aov`\nscore_aov_pval |>\n  fit(Sale_Price ~ ., data = ames)\nscore_aov_fstat |>\n  fit(Sale_Price ~ ., data = ames)\n```\n:::\n\n\nThe correlation filters, for another example: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Check the class of the object\nclass(score_cor_pearson)\n#> [1] \"filtro::class_score_cor\" \"filtro::class_score\"    \n#> [3] \"S7_object\"\nclass(score_cor_spearman)\n#> [1] \"filtro::class_score_cor\" \"filtro::class_score\"    \n#> [3] \"S7_object\"\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Method dispatch for objects of class `class_score_aov`\nscore_cor_pearson |>\n  fit(Sale_Price ~ ., data = ames)\nscore_cor_spearman |>\n  fit(Sale_Price ~ ., data = ames)\n```\n:::\n\n\n## Documenting S7 generics and methods \n\n\n\n## Accessing results after fitting\n\nOnce the method is fitted via `fit()`, the data frame of results can be accessed via `object@results`. For examples: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(modeldata)\names_subset <- modeldata::ames |>\n  # Use a subset of data for demonstration\n  dplyr::select(\n    Sale_Price,\n    MS_SubClass,\n    MS_Zoning,\n    Lot_Frontage,\n    Lot_Area,\n    Street\n  )\names_subset <- ames_subset |>\n  dplyr::mutate(Sale_Price = log10(Sale_Price))\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# # Specify ANOVA p-value and fit score\n# ames_aov_pval_res <-\n#   score_aov_pval |>\n#   fit(Sale_Price ~ ., data = ames_subset)\n# ames_aov_pval_res@results\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# # Specify ANOVA F-statistic and fit score\n# ames_aov_fstat_res <-\n#   score_aov_fstat |>\n#   fit(Sale_Price ~ ., data = ames_subset)\n# ames_aov_fstat_res@results\n```\n:::\n\n\n## Session information {#session-info}\n\n\n::: {.cell layout-align=\"center\"}\n\n```\n#> \n#> Attaching package: 'dplyr'\n#> The following objects are masked from 'package:stats':\n#> \n#>     filter, lag\n#> The following objects are masked from 'package:base':\n#> \n#>     intersect, setdiff, setequal, union\n#> ─ Session info ─────────────────────────────────────────────────────\n#>  version  R version 4.5.0 (2025-04-11)\n#>  language (EN)\n#>  date     2025-08-19\n#>  pandoc   3.6.3\n#>  quarto   1.7.32\n#> \n#> ─ Packages ─────────────────────────────────────────────────────────\n#>  package     version    date (UTC) source\n#>  dplyr       1.1.4      2023-11-17 CRAN (R 4.5.0)\n#>  filtro      0.1.0.9000 2025-08-15 Github (tidymodels/filtro@81c7d85)\n#>  modeldata   1.4.0      2024-06-19 CRAN (R 4.5.0)\n#>  purrr       1.0.4      2025-02-05 CRAN (R 4.5.0)\n#>  rlang       1.1.6      2025-04-11 CRAN (R 4.5.0)\n#>  tibble      3.2.1      2023-03-20 CRAN (R 4.5.0)\n#> \n#> ────────────────────────────────────────────────────────────────────\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}