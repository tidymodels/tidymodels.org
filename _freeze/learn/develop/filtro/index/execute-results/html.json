{
  "hash": "df23ea2eb2945a788ec662eb6db21778",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Create your own score class object\"\ncategories:\n  - developer tools\ntype: learn-subsection\nweight: 1\ndescription: | \n Create a new score class object for feature selection.\ntoc: true\ntoc-depth: 3\ninclude-after-body: ../../../resources.html\n---\n\n\n\n\n\n## Introduction\n\nTo use code in this article,  you will need to install the following packages: filtro.\n\nYou can construct new scoring objects using `class_score()`. This article is a guide to creating new scoring objects. \n\n## Scoring object\n\nThe `class_score` is a parent class. There are a few properties to this object:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(filtro)\nargs(class_score)\n#> function (outcome_type = c(\"numeric\", \"factor\"), predictor_type = c(\"numeric\", \n#> \"factor\"), case_weights = logical(0), range = integer(0), inclusive = logical(0), \n#>     fallback_value = integer(0), score_type = character(0), sorts = function() NULL, \n#>     direction = character(0), deterministic = logical(0), tuning = logical(0), \n#>     calculating_fn = function() NULL, label = character(0), packages = character(0), \n#>     results = data.frame()) \n#> NULL\n```\n:::\n\n\n-   `outcome_type`: What types of outcome can the method handle?\n\n-   `predictor_type`: What types of predictor can the method handle?\n\n-   `case_weights`: Does the method accpet case weights? \n\n-   `range`: Are there known ranges for the statistic?\n\n-   `inclusive`: Are these ranges inclusive at the bounds?\n\n-   `fallback_value`: What is a value that can be used for the statistic so that it will never be eliminated?\n\n-   `score_type`: What is the column name that will be used for the statistic values?\n\n-   (Not used) `sorts`: How should the values be sorted (from most- to least-important)?\n\n-   `direction`: What direction of values indicates the most important values?\n\n-   `deterministic`: Does the fitting process use random numbers?\n\n-   `tuning`: Does the method have tuning parameters?\n\n-   `calculating_fn`: What function is used to estimate the values from data?\n\n-   `label`: What label to use when printing?\n\n-   `packages`: What packages, if any, are required to train the method?\n\n-   `results`: A slot for the results once the method is fitted.\n\n## Scoring object for specific to filter method\n\nThe `class_score_aov` is a subclass of `class_score`. This subclass allows additional properties to be introduced: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass_score_aov <- S7::new_class(\n  \"class_score_aov\",\n  parent = class_score,\n  properties = list(\n    # Represent the score as -log10(p_value)?\n    neg_log10 = S7::new_property(S7::class_logical, default = TRUE)\n  )\n)\n```\n:::\n\n\n`score_aov_pval` is an instance (i.e., object) of the `class_score_aov` subclass, created using its constructor function: \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscore_aov_pval <-\n  class_score_aov(\n    outcome_type = c(\"numeric\", \"factor\"),\n    predictor_type = c(\"numeric\", \"factor\"),\n    case_weights = TRUE,\n    range = c(0, Inf),\n    inclusive = c(FALSE, FALSE),\n    fallback_value = Inf,\n    score_type = \"aov_pval\",\n    direction = \"maximize\",\n    deterministic = TRUE,\n    tuning = FALSE,\n    label = \"ANOVA p-values\"\n  )\n```\n:::\n\n\n`score_aov_fstat` is another instance (i.e., object) of the `class_score_aov` subclass:  \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nscore_aov_fstat <-\n  class_score_aov(\n    outcome_type = c(\"numeric\", \"factor\"),\n    predictor_type = c(\"numeric\", \"factor\"),\n    case_weights = TRUE,\n    range = c(0, Inf),\n    inclusive = c(FALSE, FALSE),\n    fallback_value = Inf,\n    score_type = \"aov_fstat\",\n    direction = \"maximize\",\n    deterministic = TRUE,\n    tuning = FALSE,\n    label = \"ANOVA F-statistics\"\n  )\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}